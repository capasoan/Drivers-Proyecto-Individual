{"ast":null,"code":"import { BUSCAR_CONDUCTOR, OBTENER_DETALLES_CONDUCTOR } from \"./action-types.js\";\nexport const seleccionarConductor = id => ({\n  type: BUSCAR_CONDUCTOR,\n  payload: id\n});\nexport const obtenerDetallesConductor = id => {\n  return async dispatch => {\n    try {\n      // Realizar la solicitud HTTP al backend para obtener detalles del conductor\n      const response = await axios.get(`http://localhost:3001/drivers/${idDriver}`);\n\n      // Una vez que se reciben los datos, dispatchar la acción con los detalles del conductor como payload\n      dispatch({\n        type: OBTENER_DETALLES_CONDUCTOR,\n        payload: response.data // Suponiendo que el backend responde con los detalles del conductor\n      });\n    } catch (error) {\n      console.error(\"Error al obtener los detalles del conductor:\", error);\n      // Podrías dispatchar una acción adicional para manejar el error si es necesario\n    }\n  };\n};","map":{"version":3,"names":["BUSCAR_CONDUCTOR","OBTENER_DETALLES_CONDUCTOR","seleccionarConductor","id","type","payload","obtenerDetallesConductor","dispatch","response","axios","get","idDriver","data","error","console"],"sources":["D:/MiPrimerProyectoJS/-Drivers-Proyecto-Individual/Client/src/redux/actions.js"],"sourcesContent":["import {BUSCAR_CONDUCTOR, OBTENER_DETALLES_CONDUCTOR } from \"./action-types.js\"\r\n\r\n\r\nexport const seleccionarConductor = (id) => ({\r\n    type: BUSCAR_CONDUCTOR,\r\n    payload: id\r\n  });\r\n  \r\n  export const obtenerDetallesConductor = (id) => {\r\n    return async (dispatch) => {\r\n      try {\r\n        // Realizar la solicitud HTTP al backend para obtener detalles del conductor\r\n        const response = await axios.get(`http://localhost:3001/drivers/${idDriver}`);\r\n        \r\n        // Una vez que se reciben los datos, dispatchar la acción con los detalles del conductor como payload\r\n        dispatch({\r\n          type: OBTENER_DETALLES_CONDUCTOR,\r\n          payload: response.data // Suponiendo que el backend responde con los detalles del conductor\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error al obtener los detalles del conductor:\", error);\r\n        // Podrías dispatchar una acción adicional para manejar el error si es necesario\r\n      }\r\n    };\r\n  };"],"mappings":"AAAA,SAAQA,gBAAgB,EAAEC,0BAA0B,QAAQ,mBAAmB;AAG/E,OAAO,MAAMC,oBAAoB,GAAIC,EAAE,KAAM;EACzCC,IAAI,EAAEJ,gBAAgB;EACtBK,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,OAAO,MAAMG,wBAAwB,GAAIH,EAAE,IAAK;EAC9C,OAAO,MAAOI,QAAQ,IAAK;IACzB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAE,iCAAgCC,QAAS,EAAC,CAAC;;MAE7E;MACAJ,QAAQ,CAAC;QACPH,IAAI,EAAEH,0BAA0B;QAChCI,OAAO,EAAEG,QAAQ,CAACI,IAAI,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACpE;IACF;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}